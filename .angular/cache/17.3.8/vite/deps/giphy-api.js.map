{
  "version": 3,
  "sources": ["../../../../../node_modules/giphy-api/util/queryStringify.js", "../../../../../node_modules/giphy-api/util/http_browser.js", "../../../../../node_modules/giphy-api/index.js"],
  "sourcesContent": ["// Adapted with small modifications from: https://github.com/unshiftio/querystringify/blob/master/index.js\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nmodule.exports = function (obj) {\n  var pairs = [];\n\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]));\n    }\n  }\n\n  return pairs.length ? '?' + pairs.join('&') : '';\n};\n", "/* globals XMLHttpRequest */\n\nexports.create = function () {\n  return this;\n};\n\n/**\n * Browser based GET request\n * @param options {Object}\n *   options.request {Object} - Request data including host and path\n *   options.https {Boolean} - Whether to utilize HTTPS library for requests or HTTP. Defaults to HTTP.\n *   options.timeout {Number} - Request timeout before returning an error. Defaults to 30000 milliseconds\n *   options.fmt {String} - Return results in html or json format (useful for viewing responses as GIFs to debug/test)\n */\nexports.get = function (options, resolve, reject) {\n  var request = options.request;\n  var timeout = options.timeout;\n  var fmt = options.fmt;\n\n  var timerId = setTimeout(function () {\n    reject(new Error('Timeout while fetching asset'));\n  }, timeout);\n\n  var xhr = new XMLHttpRequest();\n  xhr.withCredentials = false;\n\n  var onFail = function (err) {\n    clearTimeout(timerId);\n    err = err || new Error('Giphy API request failed!');\n    reject(err);\n  };\n\n  xhr.addEventListener('error', onFail);\n  xhr.addEventListener('abort', onFail);\n  xhr.addEventListener('load', function () {\n    clearTimeout(timerId);\n    var body = xhr.response;\n\n    if (fmt !== 'html') {\n      body = JSON.parse(body);\n    }\n    resolve(body);\n  });\n\n  var protocol = options.https ? 'https' : 'http';\n  var host = request.host;\n  var path = request.path;\n  var url = protocol + '://' + host + path;\n\n  xhr.open('GET', url, true);\n  xhr.send();\n};\n", "var queryStringify = require('./util/queryStringify');\nvar httpService = require('./util/http');\n\n/**\n* Hostname of the Giphy API\n*/\nvar API_HOSTNAME = 'api.giphy.com';\n/**\n* Base PATH of the Giphy API\n*/\nvar API_BASE_PATH = '/v1/';\n/**\n* Public API key provided by Giphy for anyone to use. This is used as a fallback\n* if no API key is provided\n*/\nvar PUBLIC_BETA_API_KEY = 'dc6zaTOxFJmzC';\n/**\n* True if promises exist in this engine. Otherwise false.\n*/\nvar promisesExist = typeof Promise !== 'undefined';\n\n/**\n* Error handler that supports promises and callbacks\n* @param err {String} - Error message\n* @param callback\n*/\nfunction _handleErr (err, callback) {\n  if (callback) {\n    return callback(err);\n  } else if (promisesExist) {\n    return Promise.reject(err);\n  } else {\n    throw new Error(err);\n  }\n}\n\n/**\n* @param options {String|Object} - Options object. If this is a string, it is considered the api key\n*   options.https {Boolean} - Whether to utilize HTTPS library for requests or HTTP. Defaults to HTTP.\n*   options.timeout {Number} - Request timeout before returning an error. Defaults to 30000 milliseconds\n*   options.apiKey {String} - Giphy API key. Defaults to the public beta API key\n*/\nvar GiphyAPI = function (options) {\n  if (typeof options === 'string' ||\n    typeof options === 'undefined' ||\n    options === null) {\n    this.apiKey = options || PUBLIC_BETA_API_KEY;\n    options = {};\n  } else if (typeof options === 'object') {\n    this.apiKey = options.apiKey || PUBLIC_BETA_API_KEY;\n  } else {\n    throw new Error('Invalid options passed to giphy-api');\n  }\n\n  this.https = options.https;\n  this.timeout = options.timeout || 30000;\n  this.httpService = httpService.create(this.https);\n};\n\nGiphyAPI.prototype = {\n  /**\n  * Search all Giphy gifs by word or phrase\n  *\n  * @param options Giphy API search options\n  *   options.q {String} - search query term or phrase\n  *   options.limit {Number} - (optional) number of results to return, maximum 100. Default 25.\n  *   options.offset {Number} - (optional) results offset, defaults to 0.\n  *   options.rating {String}- limit results to those rated (y,g, pg, pg-13 or r).\n  *   options.fmt {String} - (optional) return results in html or json format (useful for viewing responses as GIFs to debug/test)\n  * @param callback\n  */\n  search: function (options, callback) {\n    if (!options) {\n      return _handleErr('Search phrase cannot be empty.', callback);\n    }\n\n    return this._request({\n      api: options.api || 'gifs',\n      endpoint: 'search',\n      query: typeof options === 'string' ? {\n        q: options\n      } : options\n    }, callback);\n  },\n\n  /**\n  * Search all Giphy gifs for a single Id or an array of Id's\n  *\n  * @param id {String} - Single Giphy gif string Id or array of string Id's\n  * @param callback\n  */\n  id: function (id, callback) {\n    var idIsArr = Array.isArray(id);\n\n    if (!id || (idIsArr && id.length === 0)) {\n      return _handleErr('Id required for id API call', callback);\n    }\n\n    // If an array of Id's was passed, generate a comma delimited string for\n    // the query string.\n    if (idIsArr) {\n      id = id.join();\n    }\n\n    return this._request({\n      api: 'gifs',\n      query: {\n        ids: id\n      }\n    }, callback);\n  },\n\n  /**\n  * Search for Giphy gifs by phrase with Gify vocabulary\n  *\n  * @param options Giphy API translate options\n  *   options.s {String} - term or phrase to translate into a GIF\n  *   options.rating {String} - limit results to those rated (y,g, pg, pg-13 or r).\n  *   options.fmt {String} - (optional) return results in html or json format (useful for viewing responses as GIFs to debug/test)\n  */\n  translate: function (options, callback) {\n    if (!options) {\n      return _handleErr('Translate phrase cannot be empty.', callback);\n    }\n\n    return this._request({\n      api: options.api || 'gifs',\n      endpoint: 'translate',\n      query: typeof options === 'string' ? {\n        s: options\n      } : options\n    }, callback);\n  },\n\n  /**\n  * Fetch random gif filtered by tag\n  *\n  * @param options Giphy API random options\n  *   options.tag {String} - the GIF tag to limit randomness by\n  *   options.rating {String} - limit results to those rated (y,g, pg, pg-13 or r).\n  *   options.fmt {Stirng} - (optional) return results in html or json format (useful for viewing responses as GIFs to debug/test)\n  */\n  random: function (options, callback) {\n    var reqOptions = {\n      api: (options ? options.api : null) || 'gifs',\n      endpoint: 'random'\n    };\n\n    if (typeof options === 'string') {\n      reqOptions.query = {\n        tag: options\n      };\n    } else if (typeof options === 'object') {\n      reqOptions.query = options;\n    } else if (typeof options === 'function') {\n      callback = options;\n    }\n\n    return this._request(reqOptions, callback);\n  },\n\n  /**\n  * Fetch trending gifs\n  *\n  * @param options Giphy API random options\n  *   options.limit {Number} - (optional) limits the number of results returned. By default returns 25 results.\n  *   options.rating {String} - limit results to those rated (y,g, pg, pg-13 or r).\n  *   options.fmt {String} - (optional) return results in html or json format (useful for viewing responses as GIFs to debug/test)\n  */\n  trending: function (options, callback) {\n    var reqOptions = {\n      endpoint: 'trending'\n    };\n\n    reqOptions.api = (options ? options.api : null) || 'gifs';\n\n    // Cleanup so we don't add this to our query\n    if (options) {\n      delete options.api;\n    }\n\n    if (typeof options === 'object' &&\n      Object.keys(options).length !== 0) {\n      reqOptions.query = options;\n    } else if (typeof options === 'function') {\n      callback = options;\n    }\n\n    return this._request(reqOptions, callback);\n  },\n\n  /**\n  * Prepares the HTTP request and query string for the Giphy API\n  *\n  * @param options\n  *   options.endpoint {String} - The API endpoint e.g. search\n  *   options.query {String|Object} Query string parameters. If these are left\n  *       out then we default to an empty string. If this is passed as a string,\n  *       we default to the 'q' query string field used by Giphy.\n  */\n  _request: function (options, callback) {\n    if (!callback && !promisesExist) {\n      throw new Error('Callback must be provided if promises are unavailable');\n    }\n\n    var endpoint = '';\n    if (options.endpoint) {\n      endpoint = '/' + options.endpoint;\n    }\n\n    var query;\n    var self = this;\n\n    if (typeof options.query !== 'undefined' && typeof options.query === 'object') {\n      if (Object.keys(options.query).length === 0) {\n        if (callback) {\n          return callback(new Error('Options object should not be empty'));\n        }\n        return Promise.reject(new Error('Options object should not be empty'));\n      }\n\n      options.query.api_key = this.apiKey;\n      query = queryStringify(options.query);\n    } else {\n      query = queryStringify({\n        api_key: self.apiKey\n      });\n    }\n\n    var httpOptions = {\n      httpService: this.httpService,\n      request: {\n        host: API_HOSTNAME,\n        path: API_BASE_PATH + options.api + endpoint + query\n      },\n      timeout: this.timeout,\n      fmt: options.query && options.query.fmt,\n      https: this.https\n    };\n\n    var makeRequest = function (resolve, reject) {\n      httpService.get(httpOptions, resolve, reject);\n    };\n\n    if (callback) {\n      var resolve = function (res) {\n        callback(null, res);\n      };\n      var reject = function (err) {\n        callback(err);\n      };\n      makeRequest(resolve, reject);\n    } else {\n      if (!promisesExist) {\n        throw new Error('Callback must be provided unless Promises are available');\n      }\n      return new Promise(function (resolve, reject) {\n        makeRequest(resolve, reject);\n      });\n    }\n  }\n};\n\nmodule.exports = function (apiKey, options) {\n  return new GiphyAPI(apiKey, options);\n};\n"],
  "mappings": "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",
  "names": ["resolve", "reject"]
}
